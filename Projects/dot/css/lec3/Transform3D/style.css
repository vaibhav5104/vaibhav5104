/* div {
    height: 100px;
    width: 100px;
    background-color: aqua;
    border: 1px solid black;
}

.translated {
    transform: perspective(20px) translateZ(-10px);
}

.scaled {
    transform: rotateZ(30deg);
    transform: perspective(350px) scaleZ(4) rotateX(45deg) rotateY(30deg);
}
 */

div {
    width: 100px;
    height: 100px;
    margin-left: 100px ;
    background-color: aqua;
    border: 1px solid black;
    position: relative;
    top: 0;
    padding: 0;
}

#transform {
    /* transform: rotateZ(30deg); */
    /*
    In CSS, the `rotateZ()` function is used to rotate an element around its z-axis in a 2D plane. This means that the element is rotated as 
    if it were on a flat surface. Unlike the `rotateX()` and `rotateY()` functions, which rotate an element in 3D space, `rotateZ()` operates
    in 2D space.

    Because `rotateZ()` operates in a 2D plane, it doesn't require a perspective to be defined. Perspective is only relevant when working with 
    3D transformations, as it determines how the 3D space is projected onto the 2D screen.

    For 3D transformations like `rotateX()` and `rotateY()`, you would use the `perspective` property to set the perspective depth, which affects 
    how elements appear when they're transformed in 3D space. But for `rotateZ()`, since it's a 2D transformation, you don't need to set a perspective.
    */
    
    transform: perspective(350px) scaleZ(6) rotateX(25deg) rotateY(25deg);
}





